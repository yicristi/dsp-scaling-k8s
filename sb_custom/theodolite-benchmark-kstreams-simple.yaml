apiVersion: theodolite.rocks/v1beta1
kind: benchmark
metadata:
  name: shuffle-kstreams
  labels:
    sut: kstreams
spec:
  sut:
    resources:
      - configMap:
          name: shufflebench-resources-kstreams
          files:
          - "input-topic.yaml"
          - "output-topic.yaml"
          - "shuffle-kstreams-deployment.yaml"
          - "shuffle-kstreams-service.yaml"
          - "shuffle-kstreams-jmx-configmap.yaml"
          - "shuffle-kstreams-service-monitor.yaml"
      - configMap:
          name: shufflebench-resources-latency-exporter
          files:
          - "shuffle-latency-exporter-deployment.yaml"
          - "shuffle-latency-exporter-service-monitor.yaml"
          - "shuffle-latency-exporter-service.yaml"
    afterActions:
      - delete:
          selector:
            apiVersion: kafka.strimzi.io/v1beta2
            kind: KafkaTopic
            nameRegex: "^shufflebench-kstreams-.*"
  loadGenerator:
    resources:
      - configMap:
          name: shufflebench-resources-load-generator  
          files:
          - "shuffle-load-generator-service.yaml"
          - "shuffle-load-generator-deployment.yaml"
  resourceTypes:
    - typeName: "Instances"
      patchers:
        - type: "ReplicaPatcher"
          resource: "shuffle-kstreams-deployment.yaml"
  loadTypes:
    - typeName: "MessagesPerSecond"
      patchers:
        - type: "EnvVarPatcher"
          resource: "shuffle-load-generator-deployment.yaml"
          properties:
            container: "shuffle-load-generator"
            variableName: "NUM_RECORDS_PER_SOURCE_SECOND"
  slos:
    - name: "lag trend"
      sloType: "lag trend"
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        consumerGroup: shufflebench-kstreams
        thresholdRelToLoad: 0.01
        externalSloUrl: "http://localhost:80/evaluate-slope"
        warmup: 30 # in seconds
    # Normal, "read-only" metrics:
    - name: "throughput"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "sum by(consumergroup,topic) (rate(kafka_consumergroup_current_offset{topic='input'}[10s]) >= 0)"
        queryAggregation: mean
        repetitionAggregation: median
        operator: "true"
        threshold: 0
        warmup: 30 # in seconds
    - name: "detailedInputThroughput"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "rate(kafka_consumergroup_current_offset{topic='input'}[10s])"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 30 # in seconds
        # promQLStepSeconds: 1 # <--
        # takeOnlyFirstMetric: "false" # <--
    - name: "CPUsPercentageUtilizationPerPod30s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "avg by (pod) (irate(container_cpu_usage_seconds_total{pod=~\"shuffle-kstreams.*\"}[30s])) * 100"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 30 # in seconds
        # promQLStepSeconds: 1 # <--
        # takeOnlyFirstMetric: "false" # <--
    - name: "CPUsTotalUtilization30s"
      sloType: generic
      prometheusUrl: "http://prometheus-operated:9090"
      offset: 0
      properties:
        externalSloUrl: "http://localhost:8082"
        promQLQuery: "avg(avg by (pod) (irate(container_cpu_usage_seconds_total{pod=~\"shuffle-kstreams.*\"}[30s])) * 100) without (pod)"
        queryAggregation: mean
        repetitionAggregation: median
        operator: gte
        threshold: 0
        warmup: 30 # in seconds
        # promQLStepSeconds: 1 # <--

